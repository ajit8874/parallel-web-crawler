Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
Q1.Ans-  the Profiler sums the time taken by the parse method in all threads.
         The record method in the ProfilingState class, which is used in the ProfilingMethodInterceptor,
         sums the duration received.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
Q2. Ans- On a multi-core computer, the parallel web crawler will outperform the sequential web crawler.
         A multi-core computer does have a larger number of threads, so it benefits from the parallel crawl functionality.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    (b) What are the join points of the Profiler in the web crawler program?

Q3.Ans-The methods with @Profiled annotation are being addressed. It is the join point of the Profiler.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

Q4.Ans-- Dependency Injection - It's used in the WebCrawlerMain and Profiler classes. It uses the Guice plugin to inject dependencies.
          This design pattern simplifies tests and make classes more modular, but it increases the number of classes and/or interfaces of the project.

         - Builder Pattern - The CrawlerConfiguration, CrawlResult, ParserModule classes and PageParser interface uses the Builder method.
           It simplifies the creation of instances of complex constructor classes, but it increases significantly the amount of code.

         - Proxy Pattern - ProfilerImpl class.
           Offers a good method for working with interfaces in runtime, but makes the code more complicated to understand.


